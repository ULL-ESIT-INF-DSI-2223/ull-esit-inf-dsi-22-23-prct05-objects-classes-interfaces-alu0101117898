{"/home/usuario/practica-5/practica5/src/ejercicio-1.ts":{"path":"/home/usuario/practica-5/practica5/src/ejercicio-1.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":35}},"2":{"start":{"line":15,"column":8},"end":{"line":15,"column":27}},"3":{"start":{"line":23,"column":8},"end":{"line":23,"column":36}},"4":{"start":{"line":34,"column":8},"end":{"line":34,"column":117}},"5":{"start":{"line":34,"column":49},"end":{"line":34,"column":115}},"6":{"start":{"line":45,"column":34},"end":{"line":45,"column":36}},"7":{"start":{"line":46,"column":8},"end":{"line":52,"column":11}},"8":{"start":{"line":47,"column":12},"end":{"line":51,"column":15}},"9":{"start":{"line":48,"column":16},"end":{"line":50,"column":17}},"10":{"start":{"line":49,"column":20},"end":{"line":49,"column":50}},"11":{"start":{"line":53,"column":8},"end":{"line":53,"column":33}},"12":{"start":{"line":65,"column":37},"end":{"line":65,"column":39}},"13":{"start":{"line":66,"column":8},"end":{"line":74,"column":11}},"14":{"start":{"line":67,"column":12},"end":{"line":73,"column":15}},"15":{"start":{"line":68,"column":16},"end":{"line":72,"column":19}},"16":{"start":{"line":69,"column":20},"end":{"line":71,"column":21}},"17":{"start":{"line":70,"column":24},"end":{"line":70,"column":59}},"18":{"start":{"line":75,"column":8},"end":{"line":75,"column":36}},"19":{"start":{"line":85,"column":8},"end":{"line":85,"column":38}},"20":{"start":{"line":96,"column":8},"end":{"line":96,"column":95}},"21":{"start":{"line":96,"column":62},"end":{"line":96,"column":90}},"22":{"start":{"line":107,"column":8},"end":{"line":107,"column":101}},"23":{"start":{"line":107,"column":62},"end":{"line":107,"column":96}},"24":{"start":{"line":115,"column":8},"end":{"line":115,"column":37}},"25":{"start":{"line":116,"column":8},"end":{"line":124,"column":11}},"26":{"start":{"line":117,"column":12},"end":{"line":117,"column":35}},"27":{"start":{"line":118,"column":12},"end":{"line":123,"column":15}},"28":{"start":{"line":119,"column":16},"end":{"line":119,"column":37}},"29":{"start":{"line":120,"column":16},"end":{"line":122,"column":19}},"30":{"start":{"line":121,"column":20},"end":{"line":121,"column":43}},"31":{"start":{"line":127,"column":0},"end":{"line":127,"column":46}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":18},"end":{"line":16,"column":5}},"line":14},"1":{"name":"(anonymous_1)","decl":{"start":{"line":22,"column":4},"end":{"line":22,"column":5}},"loc":{"start":{"line":22,"column":28},"end":{"line":24,"column":5}},"line":22},"2":{"name":"(anonymous_2)","decl":{"start":{"line":33,"column":4},"end":{"line":33,"column":5}},"loc":{"start":{"line":33,"column":27},"end":{"line":35,"column":5}},"line":33},"3":{"name":"(anonymous_3)","decl":{"start":{"line":34,"column":36},"end":{"line":34,"column":37}},"loc":{"start":{"line":34,"column":49},"end":{"line":34,"column":115}},"line":34},"4":{"name":"(anonymous_4)","decl":{"start":{"line":44,"column":4},"end":{"line":44,"column":5}},"loc":{"start":{"line":44,"column":25},"end":{"line":54,"column":5}},"line":44},"5":{"name":"(anonymous_5)","decl":{"start":{"line":46,"column":30},"end":{"line":46,"column":31}},"loc":{"start":{"line":46,"column":43},"end":{"line":52,"column":9}},"line":46},"6":{"name":"(anonymous_6)","decl":{"start":{"line":47,"column":40},"end":{"line":47,"column":41}},"loc":{"start":{"line":47,"column":51},"end":{"line":51,"column":13}},"line":47},"7":{"name":"(anonymous_7)","decl":{"start":{"line":64,"column":4},"end":{"line":64,"column":5}},"loc":{"start":{"line":64,"column":28},"end":{"line":76,"column":5}},"line":64},"8":{"name":"(anonymous_8)","decl":{"start":{"line":66,"column":30},"end":{"line":66,"column":31}},"loc":{"start":{"line":66,"column":43},"end":{"line":74,"column":9}},"line":66},"9":{"name":"(anonymous_9)","decl":{"start":{"line":67,"column":40},"end":{"line":67,"column":41}},"loc":{"start":{"line":67,"column":51},"end":{"line":73,"column":13}},"line":67},"10":{"name":"(anonymous_10)","decl":{"start":{"line":68,"column":40},"end":{"line":68,"column":41}},"loc":{"start":{"line":68,"column":53},"end":{"line":72,"column":17}},"line":68},"11":{"name":"(anonymous_11)","decl":{"start":{"line":84,"column":4},"end":{"line":84,"column":5}},"loc":{"start":{"line":84,"column":32},"end":{"line":86,"column":5}},"line":84},"12":{"name":"(anonymous_12)","decl":{"start":{"line":95,"column":4},"end":{"line":95,"column":5}},"loc":{"start":{"line":95,"column":33},"end":{"line":97,"column":5}},"line":95},"13":{"name":"(anonymous_13)","decl":{"start":{"line":96,"column":38},"end":{"line":96,"column":39}},"loc":{"start":{"line":96,"column":62},"end":{"line":96,"column":90}},"line":96},"14":{"name":"(anonymous_14)","decl":{"start":{"line":106,"column":4},"end":{"line":106,"column":5}},"loc":{"start":{"line":106,"column":39},"end":{"line":108,"column":5}},"line":106},"15":{"name":"(anonymous_15)","decl":{"start":{"line":107,"column":38},"end":{"line":107,"column":39}},"loc":{"start":{"line":107,"column":62},"end":{"line":107,"column":96}},"line":107},"16":{"name":"(anonymous_16)","decl":{"start":{"line":114,"column":4},"end":{"line":114,"column":5}},"loc":{"start":{"line":114,"column":25},"end":{"line":125,"column":5}},"line":114},"17":{"name":"(anonymous_17)","decl":{"start":{"line":116,"column":30},"end":{"line":116,"column":31}},"loc":{"start":{"line":116,"column":43},"end":{"line":124,"column":9}},"line":116},"18":{"name":"(anonymous_18)","decl":{"start":{"line":118,"column":40},"end":{"line":118,"column":41}},"loc":{"start":{"line":118,"column":51},"end":{"line":123,"column":13}},"line":118},"19":{"name":"(anonymous_19)","decl":{"start":{"line":120,"column":40},"end":{"line":120,"column":41}},"loc":{"start":{"line":120,"column":53},"end":{"line":122,"column":17}},"line":120}},"branchMap":{"0":{"loc":{"start":{"line":48,"column":16},"end":{"line":50,"column":17}},"type":"if","locations":[{"start":{"line":48,"column":16},"end":{"line":50,"column":17}},{"start":{"line":48,"column":16},"end":{"line":50,"column":17}}],"line":48},"1":{"loc":{"start":{"line":69,"column":20},"end":{"line":71,"column":21}},"type":"if","locations":[{"start":{"line":69,"column":20},"end":{"line":71,"column":21}},{"start":{"line":69,"column":20},"end":{"line":71,"column":21}}],"line":69}},"s":{"0":1,"1":1,"2":1,"3":2,"4":0,"5":0,"6":1,"7":1,"8":2,"9":2,"10":1,"11":1,"12":1,"13":1,"14":2,"15":2,"16":4,"17":1,"18":1,"19":2,"20":2,"21":4,"22":2,"23":4,"24":1,"25":1,"26":2,"27":2,"28":2,"29":2,"30":4,"31":1},"f":{"0":1,"1":2,"2":0,"3":0,"4":1,"5":2,"6":2,"7":1,"8":2,"9":2,"10":4,"11":2,"12":2,"13":4,"14":2,"15":4,"16":1,"17":2,"18":2,"19":4},"b":{"0":[1,1],"1":[1,3]},"inputSourceMap":{"version":3,"file":"/home/usuario/practica-5/practica5/src/ejercicio-1.ts","sources":["/home/usuario/practica-5/practica5/src/ejercicio-1.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Se define la interfaz `IArtista` que contiene los atributos del objeto artista.\n * Se declaran 3 variables: `nombreArtista`, `oyentesMensuales` y `discografia`, donde\n * esta última es un array de objetos de tipo `IDisco`, ya que un artista puede tener\n * más de un disco.\n */\nexport interface IArtista {\n  nombreArtista: string;\n  oyentesMensuales: number;\n  discografia: IDisco[];\n}\n\n/**\n * Se define la interfaz `IDisco` que contiene los atributos del objeto disco.\n * Se declaran 3 variables: `nombreDisco`, `anioPublicacion` y `canciones`, donde\n * esta última es un array de objetos de tipo `ICancion`, ya que un disco puede tener\n * más de una canción.\n */\nexport interface IDisco {\n  nombreDisco: string;\n  anioPublicacion: number;\n  canciones: ICancion[];\n}\n\n/**\n * Se define la interfaz `ICancion` que contiene los atributos del objeto canción.\n * Se declaran 5 variables: `nombreCancion`, `duracion`, `generos`, `single` y `reproducciones`.\n * `generos` es un array de strings, ya que una canción puede tener más de un género.\n */\nexport interface ICancion {\n  nombreCancion: string;\n  duracion: number;\n  generos: string[];\n  single: boolean;\n  reproducciones: number;\n}\n\n/**\n * Se define la clase `BibliotecaMusical` que contiene los métodos `agregarArtista`,\n * `buscarArtistas`, `buscarDiscos`, `buscarCanciones`, `calcularNumCanciones`,\n * `calcularDuracionDisco`, `calcularReproduccionesDisco` y `mostrarInformacion`.\n*/\nexport class BibliotecaMusical {\n  artistas: IArtista[];\n  /**\n   * Se inicializa el constructor de la clase `BibliotecaMusical` con un array vacío.\n   */\n  constructor() {\n    this.artistas = [];\n  }\n\n  /**\n   * El método `agregarArtista` recibe un parámetro de tipo `IArtista` y lo añade al array\n   * `artistas`, definido en el constructor.\n   * @param artista Almacena el objeto de tipo `IArtista` que se pasa como parámetro.\n   */\n  agregarArtista(artista: IArtista): void {\n    this.artistas.push(artista);\n  }\n\n  /**\n   * El método `buscarArtistas` recibe un parámetro de tipo `string`, que es el nombre del artista\n   * que se desea buscar. Se utiliza el método `filter` para filtrar los artistas que coincidan.\n   * @param nombre Almacena el nombre del artista que se pasa como parámetro, el cual se quiere buscar.\n   * @returns La tabla resultante de aplicar el método `filter` al array `artistas`. Este último método\n   * busca los artistas que coincidan con el nombre pasado como parámetro. En el caso de que no se encuentre,\n   * se devuelve una tabla vacía. \n   */\n  buscarArtistas(nombre: string): IArtista[] {\n    return this.artistas.filter((artista) =>\n      artista.nombreArtista.toLowerCase().includes(nombre.toLowerCase())\n    );\n  }\n\n  /**\n   * El método `buscarDiscos` recibe un parámetro de tipo `string`, que es el nombre del disco\n   * que se desea buscar. Se utiliza el método `forEach` para recorrer los artistas y los discos de cada uno.\n   * @param nombre Almacena el nombre del disco que se pasa como parámetro, el cual se quiere buscar.\n   * @returns La tabla resultante de los discos encontrados con el nombre `nombre`. En el caso de que encuentre,\n   * añade al vector `discosEncontrados` dicho disco, ya que puede haber más de uno. En el caso de que no se encuentre,\n   * se devuelve una tabla vacía.\n   */\n  buscarDiscos(nombre: string): IDisco[] {\n    const discosEncontrados: IDisco[] = [];\n    this.artistas.forEach((artista) => {\n      artista.discografia.forEach((disco) => {\n        if (disco.nombreDisco.toLowerCase().includes(nombre.toLowerCase())) {\n          discosEncontrados.push(disco);\n        }\n      });\n    });\n    return discosEncontrados;\n  }\n\n  /**\n   * El método `buscarCanciones` recibe un parámetro de tipo `string`, que es el nombre de la canción \n   * que se desea buscar. Se utiliza el método `forEach` para recorrer cada uno de los artistas, los discos\n   * de dichos artistas, y las canciones de cada disco.\n   * @param nombre El nombre de la canción que se pasa como parámetro, la cual se quiere buscar.\n   * @returns La tabla resultante de las canciones encontradas con el nombre `nombre`. En el caso de que encuentre,\n   * añade al vector `cancionesEncontradas` dicha canción, ya que puede haber más de una. En el caso de que no se encuentre,\n   * se devuelve una tabla vacía.\n   */\n  buscarCanciones(nombre: string): ICancion[] {\n    const cancionesEncontradas: ICancion[] = [];\n    this.artistas.forEach((artista) => {\n      artista.discografia.forEach((disco) => {\n        disco.canciones.forEach((cancion) => {\n          if (cancion.nombreCancion.toLowerCase().includes(nombre.toLowerCase())) {\n            cancionesEncontradas.push(cancion);\n          }\n        });\n      });\n    });\n    return cancionesEncontradas;\n  }\n\n  /**\n   * El método `calcularNumCanciones` recibe un parámetro de tipo `IDisco`, para calcular el \n   * número de canciones que tiene un disco de un artista.\n   * @param disco Almacena el objeto de tipo `IDisco` que se pasa como parámetro.\n   * @returns Un tipo `number` que es el número de canciones que tiene ese disco. Se aplica el metodo `length`\n   * sobre el array `canciones` del objeto `disco` para obtener el número de canciones.\n   */\n  calcularNumCanciones(disco: IDisco): number {\n    return disco.canciones.length;\n  }\n\n  /**\n   * El metodo `calcularDuracionDisco` recibe un parámetro de tipo `IDisco`, para calcular la duración\n   * total de un disco de un artista.\n   * @param disco Almacena el objeto de tipo `IDisco` que se pasa como parámetro.\n   * @returns Un tipo `number` que es la duración total del disco. Se aplica el método `reduce` sobre el array\n   * `canciones` del objeto `disco` para obtener la duración total del disco. El método `reduce` recibe una función\n   * que recibe dos parámetros, el `acumulado` y `la canción`, y devuelve la suma de ambos.\n   */\n  calcularDuracionDisco(disco: IDisco): number {\n    return disco.canciones.reduce((acumulado, cancion) => acumulado + cancion.duracion, 0);\n  }\n\n  /**\n   * El método `calcularReproduccionesDisco` recibe un parámetro de tipo `IDisco`, para calcular el número\n   * total de reproducciones de un disco de un artista.\n   * @param disco Almacena el objeto de tipo `IDisco` que se pasa como parámetro.\n   * @returns Un tipo `number` que es el número total de reproducciones del disco. Se aplica el método `reduce` sobre el array\n   * `canciones` del objeto `disco` para obtener el número total de reproducciones del disco. El método `reduce` recibe una función\n   * que recibe dos parámetros, el `acumulado` y `la canción`, y devuelve la suma de ambos.\n   */\n  calcularReproduccionesDisco(disco: IDisco): number {\n    return disco.canciones.reduce((acumulado, cancion) => acumulado + cancion.reproducciones, 0);\n  }\n\n  /**\n   * `mostrarInformacion` es un método que muestra por consola la información de la biblioteca musical.\n   * Se utiliza el método `forEach` 3 veces concatenadas para recorrer cada uno de los artistas, los discos de dichos artistas,\n   * y las canciones de cada disco.\n   */\n  mostrarInformacion(): void {\n    console.table(this.artistas);\n    this.artistas.forEach((artista) =>  {\n      console.table(artista);\n      artista.discografia.forEach((disco) => {\n        console.table(disco);\n        disco.canciones.forEach((cancion) => {\n          console.table(cancion);\n        });\n      });\n    });\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ccbe55da0158b1302ad092c764738d9d5de23d34","contentHash":"756148e44886c1e03b08eed3a4a50beb433652b88e9950ca9372d42b8eb99a94"},"/home/usuario/practica-5/practica5/src/modificacion-1.ts":{"path":"/home/usuario/practica-5/practica5/src/modificacion-1.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":30}},"2":{"start":{"line":17,"column":19},"end":{"line":17,"column":21}},"3":{"start":{"line":18,"column":4},"end":{"line":20,"column":5}},"4":{"start":{"line":19,"column":8},"end":{"line":19,"column":25}},"5":{"start":{"line":21,"column":4},"end":{"line":27,"column":5}},"6":{"start":{"line":21,"column":17},"end":{"line":21,"column":18}},"7":{"start":{"line":22,"column":21},"end":{"line":22,"column":23}},"8":{"start":{"line":23,"column":8},"end":{"line":25,"column":9}},"9":{"start":{"line":23,"column":21},"end":{"line":23,"column":22}},"10":{"start":{"line":24,"column":12},"end":{"line":24,"column":29}},"11":{"start":{"line":26,"column":8},"end":{"line":26,"column":26}},"12":{"start":{"line":28,"column":4},"end":{"line":28,"column":18}},"13":{"start":{"line":30,"column":0},"end":{"line":30,"column":36}}},"fnMap":{"0":{"name":"productTable","decl":{"start":{"line":16,"column":9},"end":{"line":16,"column":21}},"loc":{"start":{"line":16,"column":25},"end":{"line":29,"column":1}},"line":16}},"branchMap":{"0":{"loc":{"start":{"line":18,"column":4},"end":{"line":20,"column":5}},"type":"if","locations":[{"start":{"line":18,"column":4},"end":{"line":20,"column":5}},{"start":{"line":18,"column":4},"end":{"line":20,"column":5}}],"line":18},"1":{"loc":{"start":{"line":18,"column":8},"end":{"line":18,"column":28}},"type":"binary-expr","locations":[{"start":{"line":18,"column":8},"end":{"line":18,"column":14}},{"start":{"line":18,"column":18},"end":{"line":18,"column":28}}],"line":18}},"s":{"0":1,"1":1,"2":6,"3":6,"4":2,"5":4,"6":4,"7":14,"8":14,"9":14,"10":54,"11":14,"12":4,"13":1},"f":{"0":6},"b":{"0":[2,4],"1":[6,5]},"inputSourceMap":{"version":3,"file":"/home/usuario/practica-5/practica5/src/modificacion-1.ts","sources":["/home/usuario/practica-5/practica5/src/modificacion-1.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;GAWG;AACH,SAAgB,YAAY,CAAC,CAAS;IAClC,MAAM,MAAM,GAAe,EAAE,CAAC;IAC9B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;QACtB,OAAO,SAAS,CAAC;KACpB;IACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;QAC3B,MAAM,IAAI,GAAa,EAAE,CAAC;QAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;YAC3B,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;SAClB;QACD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACnB;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAbH,oCAaG;AAEH,gCAAgC;AAChC,gCAAgC;AAChC,iCAAiC","sourcesContent":["/**\n * La función `productTable` recibe un `number` por pantalla y devuelve\n * la tabla de multiplicar hasta `n` y cada una compuesta de `n` componentes.\n * @param n Almacena el tamaño de la tabla de multiplicar y el \n * número de números calculados para cada una de ellas.\n * @returns La tabla de multiplicar. Se inizializa una matriz `result` vacía que\n * se va a ir rellenando. Si el número que se pasa por parámetro es menor que 1 o \n * decimal, la función devuelve `undefined`. En caso contrario, se realizan 2 bucles\n * `for` anidados, el primero para saltar entre las diferentes filas e ir aumentando \n * en 1 el número a multiplicar. También, se declara `fila` de manera auxiliar que va \n * a ir almacenando cada una de las tablas de multiplicar para ir añadiéndolas a `result`.\n */\nexport function productTable(n: number): number[][] | undefined {\n    const result: number[][] = [];\n    if (n <= 1 || n % 1 != 0) {\n        return undefined;\n    }\n    for (let i = 1; i <= n; i++) {\n      const fila: number[] = [];\n      for (let j = 1; j <= n; j++) {\n        fila.push(i * j);\n      }\n      result.push(fila);\n    }\n    return result;\n  }\n\n// console.log(productTable(1));\n// console.log(productTable(2));\n// console.log(productTable(2.4))"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ba89fd13edee90ab43bbd17f7ebda29c35770b65","contentHash":"1c30f31ad986c521b23694272a51767d0e4eb602ebc599235609e65d911f816a"},"/home/usuario/practica-5/practica5/src/modificacion-2.ts":{"path":"/home/usuario/practica-5/practica5/src/modificacion-2.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":28}},"2":{"start":{"line":18,"column":8},"end":{"line":20,"column":9}},"3":{"start":{"line":19,"column":12},"end":{"line":19,"column":65}},"4":{"start":{"line":21,"column":8},"end":{"line":23,"column":9}},"5":{"start":{"line":22,"column":12},"end":{"line":22,"column":73}},"6":{"start":{"line":24,"column":8},"end":{"line":24,"column":35}},"7":{"start":{"line":25,"column":8},"end":{"line":25,"column":39}},"8":{"start":{"line":26,"column":8},"end":{"line":26,"column":27}},"9":{"start":{"line":36,"column":8},"end":{"line":38,"column":9}},"10":{"start":{"line":37,"column":12},"end":{"line":37,"column":21}},"11":{"start":{"line":39,"column":8},"end":{"line":39,"column":34}},"12":{"start":{"line":47,"column":20},"end":{"line":47,"column":72}},"13":{"start":{"line":48,"column":8},"end":{"line":48,"column":30}},"14":{"start":{"line":49,"column":8},"end":{"line":49,"column":32}},"15":{"start":{"line":57,"column":8},"end":{"line":57,"column":64}},"16":{"start":{"line":66,"column":29},"end":{"line":66,"column":100}},"17":{"start":{"line":67,"column":31},"end":{"line":67,"column":67}},"18":{"start":{"line":68,"column":8},"end":{"line":68,"column":60}},"19":{"start":{"line":77,"column":8},"end":{"line":77,"column":77}},"20":{"start":{"line":86,"column":8},"end":{"line":86,"column":102}},"21":{"start":{"line":95,"column":8},"end":{"line":95,"column":42}},"22":{"start":{"line":102,"column":8},"end":{"line":102,"column":55}},"23":{"start":{"line":110,"column":26},"end":{"line":110,"column":59}},"24":{"start":{"line":111,"column":8},"end":{"line":111,"column":48}},"25":{"start":{"line":114,"column":0},"end":{"line":114,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":40},"end":{"line":27,"column":5}},"line":17},"1":{"name":"(anonymous_1)","decl":{"start":{"line":35,"column":4},"end":{"line":35,"column":5}},"loc":{"start":{"line":35,"column":14},"end":{"line":40,"column":5}},"line":35},"2":{"name":"(anonymous_2)","decl":{"start":{"line":46,"column":4},"end":{"line":46,"column":5}},"loc":{"start":{"line":46,"column":18},"end":{"line":50,"column":5}},"line":46},"3":{"name":"(anonymous_3)","decl":{"start":{"line":56,"column":4},"end":{"line":56,"column":5}},"loc":{"start":{"line":56,"column":14},"end":{"line":58,"column":5}},"line":56},"4":{"name":"(anonymous_4)","decl":{"start":{"line":65,"column":4},"end":{"line":65,"column":5}},"loc":{"start":{"line":65,"column":15},"end":{"line":69,"column":5}},"line":65},"5":{"name":"(anonymous_5)","decl":{"start":{"line":76,"column":4},"end":{"line":76,"column":5}},"loc":{"start":{"line":76,"column":15},"end":{"line":78,"column":5}},"line":76},"6":{"name":"(anonymous_6)","decl":{"start":{"line":85,"column":4},"end":{"line":85,"column":5}},"loc":{"start":{"line":85,"column":16},"end":{"line":87,"column":5}},"line":85},"7":{"name":"(anonymous_7)","decl":{"start":{"line":94,"column":4},"end":{"line":94,"column":5}},"loc":{"start":{"line":94,"column":15},"end":{"line":96,"column":5}},"line":94},"8":{"name":"(anonymous_8)","decl":{"start":{"line":101,"column":4},"end":{"line":101,"column":5}},"loc":{"start":{"line":101,"column":15},"end":{"line":103,"column":5}},"line":101},"9":{"name":"(anonymous_9)","decl":{"start":{"line":109,"column":4},"end":{"line":109,"column":5}},"loc":{"start":{"line":109,"column":15},"end":{"line":112,"column":5}},"line":109}},"branchMap":{"0":{"loc":{"start":{"line":18,"column":8},"end":{"line":20,"column":9}},"type":"if","locations":[{"start":{"line":18,"column":8},"end":{"line":20,"column":9}},{"start":{"line":18,"column":8},"end":{"line":20,"column":9}}],"line":18},"1":{"loc":{"start":{"line":21,"column":8},"end":{"line":23,"column":9}},"type":"if","locations":[{"start":{"line":21,"column":8},"end":{"line":23,"column":9}},{"start":{"line":21,"column":8},"end":{"line":23,"column":9}}],"line":21},"2":{"loc":{"start":{"line":21,"column":12},"end":{"line":21,"column":54}},"type":"binary-expr","locations":[{"start":{"line":21,"column":12},"end":{"line":21,"column":30}},{"start":{"line":21,"column":34},"end":{"line":21,"column":54}}],"line":21},"3":{"loc":{"start":{"line":36,"column":8},"end":{"line":38,"column":9}},"type":"if","locations":[{"start":{"line":36,"column":8},"end":{"line":38,"column":9}},{"start":{"line":36,"column":8},"end":{"line":38,"column":9}}],"line":36}},"s":{"0":1,"1":1,"2":18,"3":1,"4":17,"5":1,"6":16,"7":16,"8":16,"9":80,"10":17,"11":63,"12":17,"13":17,"14":17,"15":3,"16":2,"17":2,"18":2,"19":1,"20":2,"21":1,"22":1,"23":1,"24":1,"25":1},"f":{"0":18,"1":80,"2":17,"3":3,"4":2,"5":1,"6":2,"7":1,"8":1,"9":1},"b":{"0":[1,17],"1":[1,16],"2":[17,16],"3":[17,63]},"inputSourceMap":{"version":3,"file":"/home/usuario/practica-5/practica5/src/modificacion-2.ts","sources":["/home/usuario/practica-5/practica5/src/modificacion-2.ts"],"names":[],"mappings":";;;AAAA;;GAEG;AACH,MAAa,UAAU;IACZ,SAAS,CAAS;IAClB,WAAW,CAAS;IAC3B;;;;;;OAMG;IACH,YAAY,SAAiB,EAAE,WAAmB;QAChD,IAAI,WAAW,IAAI,CAAC,EAAE;YAClB,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;SACxD;QACD,IAAI,SAAS,GAAG,CAAC,IAAI,CAAC,IAAI,WAAW,GAAG,CAAC,IAAI,CAAC,EAAE;YAC5C,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;SAC9D;QACH,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IACD;;;;;;OAMG;IACI,GAAG,CAAC,CAAS,EAAE,CAAS;QAC7B,IAAI,CAAC,IAAI,CAAC,EAAE;YACR,OAAO,CAAC,CAAC;SACZ;QACD,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IAC5B,CAAC;IACD;;;;OAIG;IACI,WAAW;QAChB,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACjE,IAAI,CAAC,SAAS,IAAI,GAAG,CAAC;QACtB,IAAI,CAAC,WAAW,IAAI,GAAG,CAAC;IAC1B,CAAC;IAED;;;;OAIG;IACI,OAAO;QACZ,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IAC1D,CAAC;IAED;;;;;OAKG;IACI,GAAG,CAAC,KAAiB;QAC1B,MAAM,YAAY,GAAG,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,SAAS,CAAC;QAC7F,MAAM,cAAc,GAAG,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,WAAW,CAAC;QAC5D,OAAO,IAAI,UAAU,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;IACtD,CAAC;IAED;;;;;OAKG;IACI,GAAG,CAAC,KAAiB;QAC1B,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC;IACvE,CAAC;IAED;;;;;OAKG;IACI,IAAI,CAAC,KAAiB;QAC3B,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,WAAW,CAAC,CAAC;IAChG,CAAC;IAED;;;;;OAKG;IACI,GAAG,CAAC,KAAiB;QAC1B,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IACpC,CAAC;IAED;;;OAGG;IACI,QAAQ;QACb,OAAO,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;IACjD,CAAC;IAED;;;;OAIG;IACI,OAAO,CAAC,CAAS;QACtB,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC;QACpD,OAAO,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1C,CAAC;CACJ;AAjHD,gCAiHC;AAGD;;;;;;;;;;;;;;;;EAgBE","sourcesContent":["/** \n * La clase `Racionales` trabaja con un par de números `numerador` y `denominador`.\n */\nexport class Racionales {\n    public numerador: number;\n    public denominador: number;\n    /**\n     * Constructor de la clase `Racionales` que deben ser enteros. \n     * A destacar, el denominador debe ser mayor que 0. A través de \n     * estos parámetros, se realizarán varias funciones sobre ellos.\n     * @param numerador Almacena el numerador del número racional.\n     * @param denominador Almacena el denominador del número racional.\n     */\n    constructor(numerador: number, denominador: number) {\n      if (denominador == 0) {\n          throw new Error('El denominador no puede ser cero.');\n      }\n      if (numerador % 1 != 0 || denominador % 1 != 0) {\n          throw new Error('El racional tiene que ser de tipo entero.');\n        }\n      this.numerador = numerador;\n      this.denominador = denominador;\n      this.simplificar();\n    }\n    /**\n     * El método `mcm` realiza el mínimo común múltiplo entre el numerador y el denominador\n     * a través de un método recursivo.\n     * @param a Almacena el numerador.\n     * @param b Almacena el denominador.\n     * @returns el mínimo común múltiplo devolviendo `a` cuando termina la recursividad.\n     */\n    public mcm(a: number, b: number): number {\n      if (b == 0) {\n          return a;\n      }\n      return this.mcm(b, a % b);\n    }\n    /**\n     * El método`simplificar` reduce un número racional a su equivalente más pequeño. \n     * Por ejemplo, si se tiene (5, 15), este método, utilizando el método `mcm`, lo reduce\n     * a (1, 5).  \n     */\n    public simplificar(): void {\n      const mcm = this.mcm(Math.abs(this.numerador), this.denominador);\n      this.numerador /= mcm;\n      this.denominador /= mcm;\n    }\n\n    /**\n     * El método `inversa` se aplica a un tipo `Racionales` para invertir el numerador por el \n     * denominador.\n     * @returns Un tipo `Racionales` pero invirtiendo sus componentes.\n     */\n    public inversa(): Racionales {\n      return new Racionales(this.denominador, this.numerador);\n    }\n\n    /**\n     * El método `add` realiza la suma de dos números `Racionales`.\n     * @param this2 Se almacena el número racional que le pasamos como parámetro.\n     * @returns La suma de los dos números racionales. Sí o sí calcula la multiplicación\n     * de cada uno de los numeradores por el otro denominador.\n     */\n    public add(this2: Racionales): Racionales {\n      const auxNumerador = this.numerador * this2.denominador + this.denominador * this2.numerador;\n      const auxDenominador = this.denominador * this2.denominador;\n      return new Racionales(auxNumerador, auxDenominador);\n    }\n    \n    /**\n     * El método `sub` resta dos `Racionales` entre ellos.\n     * @param this2 Almacena el racional que va a restar como parámetro.\n     * @returns La resta entre los dos números racionales. Simplemente se llama a `add` pero invirtiendo\n     * el signo del segundo numerador.\n     */\n    public sub(this2: Racionales): Racionales {\n      return this.add(new Racionales(-this2.numerador, this2.denominador));\n    }\n  \n    /**\n     * El método `mult` realiza la multiplicación entre dos `Racionales`.\n     * @param this2 Se almacena el número racional que le pasamos como parámetro.\n     * @returns La multiplicaición de dos números racionales. Se devuelve la multiplicación\n     * entre los numeradores y la multiplicación entre los denominadores.\n     */\n    public mult(this2: Racionales): Racionales {\n      return new Racionales(this.numerador * this2.numerador, this.denominador * this2.denominador);\n    }\n  \n    /**\n     * `div` realiza la división entre dos números `Racionales`.\n     * @param this2 Se almacena el número racional que le pasamos como parámetro.\n     * @returns La división de dos números racionales. Se llama a la función `mult` pero el segundo número \n     * racional se invierte con `inversa`, para así realizar la división.\n     */\n    public div(this2: Racionales): Racionales {\n      return this.mult(this2.inversa());\n    }\n\n    /**\n     * El método `toString` devuelve un número `Racionales` como un `string`.\n     * @returns La cadena `'numerador/denominador'`.\n     */\n    public toString(): string {\n      return `${this.numerador}/${this.denominador}`;\n    }\n\n    /**\n     * El método `toFixed` devuelve un número resultante de la división entre el numerador y el denominador.\n     * @param n Parámetro que se le pasa a la función para que el método devuelva `n` decimales.\n     * @returns Un número resultante entre la división del numerador con el denominador, con `n` decimales.\n     */\n    public toFixed(n: number): number {\n      const recursiva = this.numerador / this.denominador;\n      return parseFloat(recursiva.toFixed(n));\n    }\n} \n\n\n/*\nconst racional1 = new Racionales(4, 8);\nconst racional2 = new Racionales(7, 9);\nconsole.log(racional1); \nconsole.log(racional2); \nconsole.log()\nconsole.log('La inversa de ',racional2, 'es ', racional2.inversa());\nconsole.log('El resultado de la suma es', racional1.add(racional2)); \nconsole.log('El resultado de la resta es', racional1.sub(racional2)); \nconsole.log('El resultado de la multiplicación es', racional1.mult(racional2)); \nconsole.log('El resultado de la división es', racional1.div(racional2));\nconsole.log(racional1.toString());\nconsole.log(racional1.toFixed(6));\n\nconsole.log()\nconsole.log()\n*/\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ea70393684732620a1d4f28bdc6fa169a0ca78a0","contentHash":"15f835b578f73a0a1e75b767a9cae5e746bd8d3120c6e8ada536841bf9cda0b1"}}